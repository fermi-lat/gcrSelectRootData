
#include <gcrSelectRootData/GcrSelectedXtal.h>
#include <commonRootData/RootDataUtil.h>
#include "Riostream.h"

ClassImp(GcrSelectedXtal)

//-----------------------------------------------------------------------------------------------------------------
void GcrSelectedXtal::print() const
{
  std::cout << "---> writeOutPrint GcrSelectedXtal" << std::endl;
  std::cout << "---> xtalID =" << getXtalId() << std::endl;
  std::cout << "---> pathLength =" << getPathLength() << std::endl;
 
}

//-----------------------------------------------------------------------------------------------------------------

void GcrSelectedXtal::getReadableXedFaces(int xedFaces, int& inFace, int& outFace){

   bool debugging = false;
 
   int n,m,subXedFaces;
   std::string faceIn, faceOut;
   
   float mGuess;
  
   for(n=XFACE_ZTOP; n<=XFACE_YRIGHT ; n++){
     subXedFaces = xedFaces - std::pow(2.,double(n));
     
     if(debugging)
	 std::cout<< "subXedFaces= " << subXedFaces << std::endl;

     mGuess = std::log(double(subXedFaces))/std::log(double(2));
     
     if(debugging)
	std::cout<< "mGuess= " << mGuess << std::endl;

     if ((mGuess-int(mGuess)) == 0.){
       
	if(debugging)
	    std::cout<< "m found, m= " << mGuess << std::endl;

	inFace=n;
	outFace=mGuess;

	break;  
     }
       
   
   }// end of for(n=0..5)

    
     
   if(debugging)
       std::cout<< "GcrXtal END getReadableXedFaces()" << std::endl;


}


//===================================================
// dummy data, just for tests
//===================================================

/**void GcrSelectedXtal::Fake( Int_t , UInt_t  , Float_t ) 
   {setPoint(TVector3(1.0,1.5, 1.9)) ;
    setDir(TVector3(2.0, 2.5, 2.9)) ;
    setD2C(1.) ;
    setD2Edge(2.) ;
    setCalEdge(3) ;
    setArcLen(4.) ;
    setEcor(5.) ;
    setEcorRms(6.) ;
    setChi2(7.) ;
    setErm(8.) ;
 }*/

/**#define COMPARE_IN_RANGE(att) rootdatautil::CompareInRange(get ## att(),ref.get ## att(),#att)

Bool_t GcrSelectedXtal::CompareInRange( const GcrSelectedXtal & ref, const std::string & name ) const {

    bool result = true ;

    result = COMPARE_IN_RANGE(Point) && result ;
    result = COMPARE_IN_RANGE(Dir) && result ;
    result = COMPARE_IN_RANGE(D2C) && result ;
    result = COMPARE_IN_RANGE(D2Edge) && result ;
    result = COMPARE_IN_RANGE(CalEdge) && result ;
    result = COMPARE_IN_RANGE(ArcLen) && result ;
    result = COMPARE_IN_RANGE(Ecor) && result ;
    result = COMPARE_IN_RANGE(EcorRms) && result ;
    result = COMPARE_IN_RANGE(Chi2) && result ;
    result = COMPARE_IN_RANGE(Erm) && result ;

    if (!result) {
        if ( name == "" ) {
            std::cout<<"Comparison ERROR for "<<ClassName()<<std::endl ;
        }
        else {
            std::cout<<"Comparison ERROR for "<<name<<std::endl ;
        }
    }
    return result ;

}*/

